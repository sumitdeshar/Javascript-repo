Comment:

    var number = 5; // in-line comment

    /*multiple line comment */

Data Types:
    undefined, null, boolean, string, symbol, number, and object

    //very similar to c++

    var myName = "Beau"
    myName = 8

    let ourName = "freeCodeCamp"; // Line no 273 for descriptive info
    
    const pi = 3.1419

    /*; is not required as syntax but useful to know where a line of code ends*/

    var a;
    var b=2;
    a=7;
    b=a;
    console.log(a); // print function

    var declaration are case sensitive in js so use camel case to seperate words for tour ease

    myVar++;// works
    myVar--;
    a += 10 // also works
    a -= 10 //
    a *= 10 //
    a /= 10 //

    var firstName = "Alan"; // declaring string
    var myStr = "I am \"double quoted\" string in \"double quotes\""
    // another method of using double and single quote inside a string is using single quote " ' " or backticks " ` "
    // ' and ` can aslo be used to quote a string

CODE OUTPUT
    \' single quote
    \" double quote
    \\ backslash
    \n new line
    \r carriage return
    \t tab
    \b backspace
    \form feed

String:
    myName = " " + " "
    myName += " " 
    console.log(myFirstName + myLastName);
    var myName = "lol"
    var middle = "name"
    myName += " "+middle+" "+"404"
    console.log(myName)
    // to print a variable with other data rather than string use JSON.stringify(variable_name)

 Length of string
    var lengthString = 0;
    var string = "string";
    lengthString = string.length;
    console.log(lengthString)

Bracket Notation in String
    var FirstName = "HumbleGod";
    FirstName = "MumbleGod";
    console.log(FirstName)
    console.log(FirstName[0])

    to find the last letter in a string use length of string - 1 TECHNIQUE

Arrys
    var array['John", 3];
    var array1[ [1,2,3],[4,5,6],[7,8,9]]
    array.push(["happy","joy"])
    array.pop()
        when pushing a pulling to multidimensional array index of bigger array is taken in consideration in push and pop function
    shift is pop at beginning
    unshift is pushing at beginning

Function
    Syntax:
        function functionName(parameter)
        {
            console.log("hello world")
        }
        functionName();

Global and local variable
when a variable is declared within a function with no var or let then it automatically becomes global 

    var outerWear = "T-shirt";// global function
    function myOutift()
    {
        var outerWear = "Sweater";//  local function
        return outerWear;// local functoin takes priority over the global when both ahve same variableName
    }

    console.log(myOutfit());
    console/log(outerWear);

If Statement
    Syntax:
        if(isTrue)
        {
            argument ....;
        }
        else if()
        {
            argument ...;
        }
        else
        {
            argument...;
        }

    Note:
        /*  3 == 3 True // equality
            3 == '3' True
        but
            3 === 3 True // strict equality
            3 === '3' False */
        For inequality
        /*  3 != 3 True // inequality
            3 != '3' True
        but
            3 !== 3 True // strict inequality
            3 !== '3' False */

Switch
    function caseInSwitch(val) {
    var answer = ""$
    switch(val) {
    case 1:
        answer = "alpha";
        break;
    case 2:
        answer = "beta";
        break;
    case 3:
        answer = "gamma";
        break;
    case 4:
        answer = "delta";
        break;

    Note:
        to select multiple case statement or to have same answer in multiple case
        switch(val) {
        case 1:
        case 2:
        case 3:
        case 4:
            answer = "delta";
            break;
        } 

Object 
//key in python
    var ourDog = {
    "name": "Khaire",
    "Legs": 4,
    "tails": 1,
    "friends": ["everything!"]
    };

Accessing Object Properties with Dot Notation
    var nameValue = ourDog.name;
    var legsValue = ourDog.Legs; 

Accessing Object Properties using bracket Notation
    //same setup
    var nameValue = ourDog["name"];
    var legsValue = ourDog['Legs'];

    //new code
    var testObj = {
        16: "Montana",
        19: "Unitas"
    };

    var playerNumber = 16;
    var player = testObj[playerNumber];// using variable_name

Adding Object Properties
    //same setup
    ourDog.bark = "bow-how"
    OR
    ourDog['bark'] = 'hwoof'

Deleting Object Properties
    //continue setup
    delete ourDog.bark;
    OR
    delete.ourDog['bark']

Checking Object Properties

myObj.hasOwnProperty(checkProp) // returns true or false

Loops:
While loop:
Syntax:
    while(i<5){
        arg
    }

For loop:
Syntax:
    for (var i = 0; i<5;i++)
    {
        arg
    }
Example:
    var ourArr = [9,10,11,12]
    var ourTotal = 0;
    for (var i=0; i<ourArr.length; i++)
        {
            ourTotal += ourArr[i]
        }

Nexted For loop:
    function multiplyAll(arr)
    {
        var product = 1;

        for (var i=0; i < arr.length; i++)
        {
            for (var j=0; j<arr[i].length; j++)
            {
                product *= arr[i][j];
            }
        }
        return product;
    }

    var product = multiplyAll([[1,2],[3,4],[5,6,7]]);

    console. log(product) ;

Do while loop:
    Its used in same senerio as while loop but the code gets to run atleast one time before conditon is checked
Syntax:
do{
    argument
}while(condition)

Creating random number
- Math.random(); give a random fractional number between 0 and 1 
- Math.floor(Math.random()*20); give a whole number between 0 t0 19

function ourRandomRange(ourMin, ourMax){

    return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;
}

-Creating a string to interger
    parseInt(str, base)//"56"->56
    //default base is at 10 

-Ternary poerator
    //condition ? statement-if-true : statement-if-false;
Example:
    function checkEqual(a, b) {
        return a === b ? true : false;
        //but return a === b ; also means same for this case
//function checkSign(num) {
    return num > 0 ? "positive" : num < 0 ? "negative" : "zero";
    }

Data types:
let:(Different between let and var)
    -doesnot allow a variable to be declared with same varible_name
    Example:

    function checkscope(){
        let i = "function scope";
        if (true) {
            let i = "block scope";              // i is declared locally which cannot be accessed outside the block
                                                // when declared with var which can be accessed outside the block locally
            console. log("Block scope i is: ", i);
        }
        console. log("Function scope i is: ", i);
        return i;
    }

const:
    It is read-only variable cannot even be appended
    use a capital variable_name declaration to remember that it is a const variable

-Mutate(change) a array declared in const
    const s = [5, 7, 2];
    function editInPlace() {
        "use strict";

        //s= [2,5,7] is not possible hence when done by bracket notation it is possible
        s[0] = 2;
        s[1] = 5;
        s[2] = 7;
        }

-Object data mutation
    function freezeObj() {
        "use strict"
        const MATH_CONSTANTS ={
            PI:3.121529
        };
        Oject.freeze(MATH_CONSTANTS);
        try{
            MATH_CONSTANTS.PI = 99;
        } 
        catch( ex ) {
            console. log(ex) ;
        }
        return MATH_CONSTANTS.PI;
        }
        const PI = freezeObj();
        console.log(PI);

Arrow Function:
    anonymous function
        var magic = function() {//function name may be written or may not be written
        return new Date();
        };
    converting above to arrow function:
        const magic = () => new Date(); // same as above but represented in arrow form and removing bracket as there is only one argument

    Arrow function with parameter:
        const myConcat = (arr1, arr2) => {
            return arr1.concat(arr2);           // keeping return and bracket tho only one argument
        };
        console. log(myConcat([1, 2], [3, 4, 5]));

    High Order Arrow function:
        const realNumberArray = [4, 5.6, -9.8, 3.14, 42 , 8.34, -2]

        const squareList = (arr) => {
            const squaredIntegers = arr.filter(num => Number.isInteger && (num) > 0).map(x => x * x);
            return squaredIntegers
        };

Function declaration

Class

Import and Export
Import:
//file1
export const capitalizeString = str => str.toUpperCase();
//next file 
import { capitalizeString } from "./string_function"
const cap = capitalizeString("hello!");
console.log(cap);

Export:
const capitalizeString = (string) => {
return string.charAt(0).toUpperCase() + string.slice(1);

export { capitalizeString };


export const foo = "bar";
export const bar = "foo";

//import everything
import  * as object_name from "file_name"
